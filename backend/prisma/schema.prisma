// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  password          String
  firstName         String?
  lastName          String?
  role              String          @default("USER")
  organizationId    String?
  mfaEnabled        Boolean         @default(false)
  mfaSecret         String?
  mfaBackupCodes    String?
  emailVerified     Boolean         @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLogin         DateTime?
  loginAttempts     Int             @default(0)
  lockUntil         DateTime?
  preferences       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  organization      Organization?   @relation(fields: [organizationId], references: [id])
  chatSessions      ChatSession[]
  mcpServers        McpServer[]
  apiKeys           ApiKey[]
  securityEvents    SecurityEvent[]
  toolExecutions    ToolExecution[]

  @@map("users")
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  description   String?
  plan          String   @default("FREE")
  status        String   @default("ACTIVE")
  settings      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  users         User[]
  invitations   Invitation[]

  @@map("organizations")
}

model Invitation {
  id             String   @id @default(cuid())
  email          String
  role           String   @default("USER")
  status         String   @default("PENDING")
  token          String   @unique
  expiresAt      DateTime
  organizationId String
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("invitations")
}

model ChatSession {
  id            String    @id @default(cuid())
  userId        String
  title         String
  model         String
  totalTokens   Int       @default(0)
  messageCount  Int       @default(0)
  metadata      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      ChatMessage[]
  toolExecutions ToolExecution[]

  @@map("chat_sessions")
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  role        String
  content     String
  tokens      Int         @default(0)
  model       String?
  metadata    String?
  createdAt   DateTime    @default(now())

  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model McpServer {
  id              String        @id @default(cuid())
  userId          String
  name            String
  type            String
  url             String?
  status          String        @default("STOPPED")
  config          String
  availableTools  String?
  metrics         String?
  lastError       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  toolExecutions  ToolExecution[]

  @@map("mcp_servers")
}

model ToolExecution {
  id            String    @id @default(cuid())
  serverId      String
  userId        String
  sessionId     String?
  toolName      String
  parameters    String
  result        String?
  executionTime Int       @default(0)
  success       Boolean
  error         String?
  createdAt     DateTime  @default(now())

  server        McpServer    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session       ChatSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("tool_executions")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  permissions String?
  lastUsed    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model SecurityEvent {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  ipAddress   String?
  userAgent   String?
  metadata    String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_events")
}

model SystemMetrics {
  id          String    @id @default(cuid())
  type        String    // cpu, memory, disk, network, etc.
  value       Float
  unit        String    // percentage, bytes, etc.
  metadata    String?
  timestamp   DateTime  @default(now())

  @@map("system_metrics")
}

model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  changes     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  @@map("audit_logs")
}

// Note: SQLite doesn't support enums, so we use String fields with default values
// Valid values for role: "USER", "ADMIN", "SUPER_ADMIN"
// Valid values for plan: "FREE", "PRO", "ENTERPRISE"
// Valid values for organizationStatus: "ACTIVE", "SUSPENDED", "PENDING"
// Valid values for invitationStatus: "PENDING", "ACCEPTED", "EXPIRED", "CANCELLED"
// Valid values for messageRole: "USER", "ASSISTANT", "SYSTEM"
// Valid values for serverType: "DOCKER", "PROCESS", "REMOTE"
// Valid values for serverStatus: "STOPPED", "STARTING", "RUNNING", "ERROR", "STOPPING"
// Valid values for securityEventType: "LOGIN_SUCCESS", "LOGIN_FAILURE", "LOGOUT", "PASSWORD_CHANGE", "MFA_ENABLED", "MFA_DISABLED", "API_KEY_CREATED", "API_KEY_DELETED", "SUSPICIOUS_ACTIVITY", "ACCOUNT_LOCKED"